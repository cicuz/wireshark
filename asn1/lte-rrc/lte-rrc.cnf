# lte-rrc.cnf
# lte-rrc conformation file
# Copyright 2008 Vincent Helfre 
# $Id$

#.OPT
PER
UNALIGNED
#.END

#.OMIT_ASSIGNMENT
#.END

#.EXPORTS
HandoverCommand
HandoverCommand_PDU
HandoverPreparationInformation
HandoverPreparationInformation_PDU
UERadioAccessCapabilityInformation
UERadioAccessCapabilityInformation_PDU
UE-EUTRA-Capability
UE-EUTRA-Capability_PDU
#UEInformationResponse

#.PDU_NEW
HandoverCommand
HandoverPreparationInformation
UERadioAccessCapabilityInformation
BCCH-BCH-Message             @bcch.bch
BCCH-DL-SCH-Message          @bcch.dl.sch
MCCH-Message                 @mcch				
PCCH-Message                 @pcch
DL-CCCH-Message              @dl.ccch
DL-DCCH-Message              @dl.dcch
UL-CCCH-Message              @ul.ccch
UL-DCCH-Message              @ul.dcch
UECapabilityInformation      @ue_cap_info
UE-EUTRA-Capability          @ue_eutra_cap
#.END

#.OMIT_ASSIGNMENT
# Get rid of unused code warnings
VarShortMAC-Input
VarMeasConfig
VarMeasReportList
VarMeasReport

#.FN_HDR UL-DCCH-Message
  actx->pinfo->link_dir = P2P_DIR_UL;

#.FN_HDR DL-DCCH-Message
  actx->pinfo->link_dir = P2P_DIR_DL;

#.FN_BODY DedicatedInfoNAS VAL_PTR = &nas_eps_tvb
  tvbuff_t *nas_eps_tvb=NULL;

%(DEFAULT_BODY)s

	if ((nas_eps_tvb)&&(nas_eps_handle))
		call_dissector(nas_eps_handle,nas_eps_tvb,actx->pinfo, tree);

#.FN_BODY UE-CapabilityRAT-Container
  lte_rrc_rat_type_value = -1;
%(DEFAULT_BODY)s

#.FN_BODY RAT-Type VAL_PTR = &lte_rrc_rat_type_value
%(DEFAULT_BODY)s

#RAT-Type ::=						ENUMERATED {
#										eutra, utra, geran-cs, geran-ps, cdma2000-1XRTT,
#										spare3, spare2, spare1, ...}
# ueCapabilityRAT-Container
# Container for the UE capabilities of the indicated RAT. The encoding is defined in the specification of each RAT:
# For E-UTRA: the encoding of UE capabilities is defined in IE UE-EUTRA-Capability.
# For UTRA: the octet string contains the INTER RAT HANDOVER INFO message defined in TS 25.331 [19].
# For GERAN CS: the octet string contains the concatenated string of the Mobile Station Classmark 2 and Mobile
# Station Classmark 3. The first 5 octets correspond to Mobile Station Classmark 2 and the following octets correspond
# to Mobile Station Classmark 3. The Mobile Station Classmark 2 is formatted as 'TLV' and is coded in the same way as
# the Mobile Station Classmark 2 information element in TS 24.008 [49]. The first octet is the Mobile station classmark 2
# IEI and its value shall be set to 33H. The second octet is the Length of mobile station classmark 2 and its value shall
# be set to 3. The octet 3 contains the first octet of the value part of the Mobile Station Classmark 2 information element,
# the octet 4 contains the second octet of the value part of the Mobile Station Classmark 2 information element and so
# on. For each of these octets, the first/ leftmost/ most significant bit of the octet contains b8 of the corresponding octet
# of the Mobile Station Classmark 2. The Mobile Station Classmark 3 is formatted as 'V' and is coded in the same way
# as the value part in the Mobile station classmark 3 information element in TS 24.008 [49]. The sixth octet of this octet
# string contains octet 1 of the value part of Mobile station classmark 3, the seventh of octet of this octet string contains
# octet 2 of the value part of Mobile station classmark 3 and so on. Note.
# For GERAN PS: the encoding of UE capabilities is formatted as 'V' and is coded in the same way as the value part in
# the MS Radio Access Capability information element in TS 24.008 [49].
# For CDMA2000-1XRTT: the octet string contains the A21 Mobile Subscription Information and the encoding of this is
# defined in A.S0008 [33]. The A21 Mobile Subscription Information contains the supported CDMA2000 1xRTT band
# class and band sub-class information.

#.FN_BODY UE-CapabilityRAT-Container/ueCapabilityRAT-Container VAL_PTR = &ue_eutra_cap_tvb
  tvbuff_t *ue_eutra_cap_tvb=NULL;
%(DEFAULT_BODY)s

#.FN_FTR UE-CapabilityRAT-Container/ueCapabilityRAT-Container
if(ue_eutra_cap_tvb){
	guint32 length;
	proto_item *item;
	proto_tree *subtree;
	guint8 byte;
	switch(lte_rrc_rat_type_value){
	case 0:
		/* eutra */
		dissect_lte_rrc_UE_EUTRA_Capability_PDU(ue_eutra_cap_tvb, actx->pinfo, tree);
		break;
	case 1:
		/* utra */
		dissect_rrc_InterRATHandoverInfo_PDU(ue_eutra_cap_tvb, actx->pinfo, tree);
		break;
	case 2:
		/* geran-cs */
		/* Mobile Station Classmark 2 is formatted as TLV with the two first bytes set to 0x33 0x03 */
		item = proto_tree_add_text(tree, ue_eutra_cap_tvb, 0, 5, "Mobile Station Classmark 2");
		subtree = proto_item_add_subtree(item, ett_lte_rrc_UE_CapabilityRAT_Container);
		byte = tvb_get_guint8(ue_eutra_cap_tvb, 0);
		if (byte != 0x33) {
			expert_add_info_format(actx->pinfo, item, PI_MALFORMED, PI_ERROR,
				"Unexpected type value (found 0x%02X)", byte);
		}
		byte = tvb_get_guint8(ue_eutra_cap_tvb, 1);
		if (byte != 0x03) {
			expert_add_info_format(actx->pinfo, item, PI_MALFORMED, PI_ERROR,
				"Unexpected length value (found %d)", byte);
		}
		de_ms_cm_2(ue_eutra_cap_tvb, subtree, actx->pinfo, 2, 3, NULL, 0);
		/* Mobile Station Classmark 3 is formatted as V */
		length = tvb_length(ue_eutra_cap_tvb)-5;
		item = proto_tree_add_text(tree, ue_eutra_cap_tvb, 5, length, "Mobile Station Classmark 3");
		subtree = proto_item_add_subtree(item, ett_lte_rrc_UE_CapabilityRAT_Container);
		de_ms_cm_3(ue_eutra_cap_tvb, subtree, actx->pinfo, 5, length, NULL, 0);
		break;
	case 3:
		/* geran-ps */
		/* MS Radio Access Capability is formatted as V */
		length = tvb_length(ue_eutra_cap_tvb);
		item = proto_tree_add_text(tree, ue_eutra_cap_tvb, 0, length, "MS Radio Access Capability");
		subtree = proto_item_add_subtree(item, ett_lte_rrc_UE_CapabilityRAT_Container);
		de_gmm_ms_radio_acc_cap(ue_eutra_cap_tvb, subtree, actx->pinfo, 0, length, NULL, 0);
		break;
	case 4:
		/* cdma2000-1XRTT */
		/* dissection of "A21 Mobile Subscription Information" could be added to packet-ansi_a.c */
		break;
	default:
		break;
	}
}

#.FN_BODY UE-EUTRA-Capability/featureGroupIndicators VAL_PTR = &featureGroupIndicators_tvb
  tvbuff_t *featureGroupIndicators_tvb=NULL;
%(DEFAULT_BODY)s
  if(featureGroupIndicators_tvb){
    /* Dissect featureGroupIndicators */
    proto_tree *subtree;
    gint curr_bit_offset = 0;
    subtree = proto_item_add_subtree(actx->created_item, ett_lte_rrc_featureGroupIndicators);
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_1, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_2, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_3, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_4, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_5, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_6, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_7, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_8, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_9, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_10, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_11, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_12, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_13, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_14, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_15, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_16, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_17, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_18, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_19, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_20, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_21, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_22, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_23, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_24, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_25, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_26, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_27, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_28, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_29, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_30, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_31, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
    proto_tree_add_bits_item(subtree, hf_lte_rrc_eutra_cap_feat_group_ind_32, featureGroupIndicators_tvb, curr_bit_offset, 1, FALSE);
    curr_bit_offset++;
  }

#.FN_BODY Handover
  lte_rrc_ho_target_rat_type_value = -1;
%(DEFAULT_BODY)s

#.FN_BODY Handover/targetRAT-Type VAL_PTR = &lte_rrc_ho_target_rat_type_value
%(DEFAULT_BODY)s

#.FN_BODY Handover/targetRAT-MessageContainer VAL_PTR = &target_rat_msg_cont_tvb
  tvbuff_t *target_rat_msg_cont_tvb = NULL;
%(DEFAULT_BODY)s
  if(target_rat_msg_cont_tvb){
    switch(lte_rrc_ho_target_rat_type_value){
    case 0:
      /* utra */
      if (rrc_irat_ho_to_utran_cmd_handle)
        call_dissector(rrc_irat_ho_to_utran_cmd_handle, target_rat_msg_cont_tvb, actx->pinfo, tree);
      break;
    case 1:
      /* geran */
      break;
    case 2:
      /* cdma2000-1XRTT */
      break;
    case 3:
      /* cdma2000-HRPD */
      break;
    default:
      break;
    }
  }

#.FN_BODY Handover/nas-SecurityParamFromEUTRA VAL_PTR = &nas_sec_param_from_eutra_tvb
  tvbuff_t *nas_sec_param_from_eutra_tvb = NULL;
  guint32 length;
  proto_item *item;
  proto_tree *subtree;

%(DEFAULT_BODY)s
  length = tvb_length(nas_sec_param_from_eutra_tvb);
  item = proto_tree_add_text(tree, nas_sec_param_from_eutra_tvb, 0, length, "NAS security parameters from E-UTRA");
  subtree = proto_item_add_subtree(item, hf_lte_rrc_nas_SecurityParamFromEUTRA);
  de_emm_sec_par_from_eutra(nas_sec_param_from_eutra_tvb, subtree, actx->pinfo, 0, length, NULL, 0);

#.FN_BODY SecurityConfigHO/handoverType/interRAT/nas-SecurityParamToEUTRA VAL_PTR = &nas_sec_param_to_eutra_tvb
  tvbuff_t *nas_sec_param_to_eutra_tvb = NULL;
  guint32 length;
  proto_item *item;
  proto_tree *subtree;

%(DEFAULT_BODY)s
  length = tvb_length(nas_sec_param_to_eutra_tvb);
  item = proto_tree_add_text(tree, nas_sec_param_to_eutra_tvb, 0, length, "NAS security parameters to E-UTRA");
  subtree = proto_item_add_subtree(item, hf_lte_rrc_nas_SecurityParamToEUTRA);
  de_emm_sec_par_to_eutra(nas_sec_param_to_eutra_tvb, subtree, actx->pinfo, 0, length, NULL, 0);


#.FN_BODY CellInfoUTRA-FDD-r9/utra-BCCH-Container-r9 VAL_PTR = &utra_bcch_cont_tvb
  tvbuff_t *utra_bcch_cont_tvb = NULL;
%(DEFAULT_BODY)s
  if (utra_bcch_cont_tvb && rrc_sys_info_cont_handle)
    call_dissector(rrc_sys_info_cont_handle, utra_bcch_cont_tvb, actx->pinfo, tree);

#.FN_BODY CellInfoUTRA-TDD-r9/utra-BCCH-Container-r9 VAL_PTR = &utra_bcch_cont_tvb
  tvbuff_t *utra_bcch_cont_tvb = NULL;
%(DEFAULT_BODY)s
  if (utra_bcch_cont_tvb && rrc_sys_info_cont_handle)
    call_dissector(rrc_sys_info_cont_handle, utra_bcch_cont_tvb, actx->pinfo, tree);

#.FN_HDR MasterInformationBlock

col_append_str(actx->pinfo->cinfo, COL_INFO, "MasterInformationBlock ");

#.FN_HDR SystemInformation

col_append_str(actx->pinfo->cinfo, COL_INFO, "SystemInformation ");

#.FN_HDR SystemInformationBlockType1

col_append_str(actx->pinfo->cinfo, COL_INFO, "SystemInformationBlockType1 ");

#.FN_HDR MBSFNAreaConfiguration-r9

col_append_str(actx->pinfo->cinfo, COL_INFO, "MBSFNAreaConfiguration-r9 ");

#.FN_HDR Paging

col_append_str(actx->pinfo->cinfo, COL_INFO, "Paging ");

#.FN_HDR RRCConnectionReestablishment

col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionReestablishment ");

#.FN_HDR RRCConnectionReestablishmentReject

col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionReestablishmentReject ");

#.FN_HDR RRCConnectionReject

col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionReject ");

#.FN_HDR RRCConnectionSetup

col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionSetup ");

#.FN_HDR CSFBParametersResponseCDMA2000

col_append_str(actx->pinfo->cinfo, COL_INFO, "CSFBParametersResponseCDMA2000 ");

#.FN_HDR DLInformationTransfer

col_append_str(actx->pinfo->cinfo, COL_INFO, "DLInformationTransfer ");

#.FN_HDR HandoverFromEUTRAPreparationRequest

col_append_str(actx->pinfo->cinfo, COL_INFO, "HandoverFromEUTRAPreparationRequest ");

#.FN_HDR MobilityFromEUTRACommand

col_append_str(actx->pinfo->cinfo, COL_INFO, "MobilityFromEUTRACommand ");

#.FN_HDR RRCConnectionReconfiguration

col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionReconfiguration ");

#.FN_HDR RRCConnectionRelease

col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionRelease ");

#.FN_HDR SecurityModeCommand

col_append_str(actx->pinfo->cinfo, COL_INFO, "SecurityModeCommand ");

#.FN_HDR UECapabilityEnquiry

col_append_str(actx->pinfo->cinfo, COL_INFO, "UECapabilityEnquiry ");

#.FN_HDR CounterCheck

col_append_str(actx->pinfo->cinfo, COL_INFO, "CounterCheck ");

#.FN_HDR UEInformationRequest-r9

col_append_str(actx->pinfo->cinfo, COL_INFO, "UEInformationRequest-r9 ");

#.FN_HDR RRCConnectionReestablishmentRequest

col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionReestablishmentRequest ");

#.FN_HDR RRCConnectionRequest

col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionRequest ");

#.FN_HDR CSFBParametersRequestCDMA2000

col_append_str(actx->pinfo->cinfo, COL_INFO, "CSFBParametersRequestCDMA2000 ");

#.FN_HDR MeasurementReport

col_append_str(actx->pinfo->cinfo, COL_INFO, "MeasurementReport ");

#.FN_HDR RRCConnectionReconfigurationComplete

col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionReconfigurationComplete ");

#.FN_HDR RRCConnectionReestablishmentComplete

col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionReestablishmentComplete ");

#.FN_HDR RRCConnectionSetupComplete

col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionSetupComplete ");

#.FN_HDR SecurityModeComplete

col_append_str(actx->pinfo->cinfo, COL_INFO, "SecurityModeComplete ");

#.FN_HDR SecurityModeFailure

col_append_str(actx->pinfo->cinfo, COL_INFO, "SecurityModeFailure ");

#.FN_HDR UECapabilityInformation

col_append_str(actx->pinfo->cinfo, COL_INFO, "UECapabilityInformation ");

#.FN_HDR ULHandoverPreparationTransfer

col_append_str(actx->pinfo->cinfo, COL_INFO, "ULHandoverPreparationTransfer ");

#.FN_HDR ULInformationTransfer

col_append_str(actx->pinfo->cinfo, COL_INFO, "ULInformationTransfer ");

#.FN_HDR CounterCheckResponse

col_append_str(actx->pinfo->cinfo, COL_INFO, "CounterCheckResponse ");

#.FN_HDR UEInformationResponse-r9

col_append_str(actx->pinfo->cinfo, COL_INFO, "UEInformationResponse-r9 ");

#.FN_HDR ProximityIndication-r9

col_append_str(actx->pinfo->cinfo, COL_INFO, "ProximityIndication-r9 ");

